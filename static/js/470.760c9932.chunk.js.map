{"version":3,"file":"static/js/470.760c9932.chunk.js","mappings":"kNAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAe,mCAAG,yGAAOC,EAAP,+BAAsB,sBAAtB,SACNF,EAAAA,EAAAA,IAAUE,EAAc,CAC7CC,OAAQ,CACNC,QAASL,KAHgB,cACvBM,EADuB,yBAOtBA,EAASC,MAPa,2CAAH,oD,wNCHfC,EAAOC,EAAAA,GAAAA,KAAH,2NAYJC,EAAQD,EAAAA,GAAAA,MAAH,0PAeLE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,IAAPH,CAAH,yDAKJI,EAASJ,EAAAA,GAAAA,OAAH,kV,SCRnB,EAvBkB,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC7B,GAA0BC,EAAAA,EAAAA,UAAQ,OAACD,QAAD,IAACA,EAAAA,EAAS,IAA5C,eAAOE,EAAP,KAAcC,EAAd,KAIA,OACE,+BACE,UAACV,EAAD,CAAMM,SAAU,SAAAK,GAAC,OAAIL,EAASK,EAAb,EAAjB,WACE,SAACT,EAAD,CACEU,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,cACZN,MAAOA,EACPO,SAAU,SAAAL,GAAC,OAZF,SAAAA,GACfD,EAASC,EAAEM,OAAOR,MACnB,CAUsBO,CAASL,EAAb,KAEb,SAACN,EAAD,CAAQO,KAAK,SAAb,UACE,SAACT,EAAD,UAKT,E,UCpBYe,EAAS,WACpB,OAAoCV,EAAAA,EAAAA,UAAS,IAA7C,eAAOW,EAAP,KAAmBC,EAAnB,KACA,GAAkCZ,EAAAA,EAAAA,WAAS,GAA3C,eAAOa,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAO9B,EAAP,KAAqB+B,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAKhC,EAAaiC,IAAI,SAAtB,CAGA,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,oGAEdT,GAAa,GAFC,UAGI5B,EAAAA,EAAAA,GAAgB,uBAAD,OACRC,EAAaiC,IAAI,WAJ5B,OAGRI,EAHQ,OAMdZ,EAAcY,EAAIC,SANJ,gDAQdC,QAAQC,IAAI,KAAMC,SARJ,yBAUdd,GAAa,GAVC,4EAAH,qDAcf,OADAS,IACO,WACLF,EAAWQ,OACZ,CAlBA,CAmBF,GAAE,CAAC1C,IAUJ,OACE,iCACE,SAAC,EAAD,CACEW,SAXW,SAAAK,GACfA,EAAE2B,iBACG3B,EAAEM,OAAO,GAAGR,OAGjBiB,EAAgB,CAAEnB,MAAOI,EAAEM,OAAO,GAAGR,OACtC,EAMKF,MAAOZ,EAAaiC,IAAI,WAExBP,GAWA,SAACkB,EAAA,EAAD,KAVA,wBACGpB,EAAWqB,KAAI,SAAAC,GAAK,OACnB,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMtB,GAAxC,UACGkB,EAAMK,MAAO,QAFTL,EAAME,GADI,QAa9B,EAED,G","sources":["axios.js","components/SearchBar.styled.js","components/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b769d525e1ad4eef01b48a7fe3c818d0';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMoviesData = async (searchParams = '/trending/movie/day') => {\n  const response = await axios.get(searchParams, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n};\n","import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  margin: 26px;\n  width: 100%;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 1px solid black;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 28px;\n  height: 28px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 68px;\n  height: 48px;\n  border: 0;\n\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &.hover {\n    opacity: 1;\n  }\n`;\n","import { useState } from 'react';\nimport { Input, Icon, Form, Button } from './SearchBar.styled';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ onSubmit, query }) => {\n  const [value, setValue] = useState(query ?? '');\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n  return (\n    <>\n      <Form onSubmit={e => onSubmit(e)}>\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search film\"\n          value={value}\n          onChange={e => onChange(e)}\n        />\n        <Button type=\"submit\">\n          <Icon />\n        </Button>\n      </Form>\n    </>\n  );\n};\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  query: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { fetchMoviesData } from '../axios';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport SearchBar from 'components/SearchBar';\nimport Loader from 'components/Loader';\n\nexport const Movies = () => {\n  const [moviesData, setMoviesData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (!searchParams.get('query')) {\n      return;\n    }\n    const controller = new AbortController();\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const res = await fetchMoviesData(\n          `/search/movie?query=${searchParams.get('query')}`\n        );\n        setMoviesData(res.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [searchParams]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (!e.target[0].value) {\n      return;\n    }\n    setSearchParams({ query: e.target[0].value });\n  };\n\n  return (\n    <>\n      <SearchBar\n        onSubmit={onSubmit}\n        query={searchParams.get('query')}\n      ></SearchBar>\n      {!isLoading ? (\n        <ul>\n          {moviesData.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}{' '}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","fetchMoviesData","searchParams","params","api_key","response","data","Form","styled","Input","Icon","HiSearch","Button","onSubmit","query","useState","value","setValue","e","type","autoComplete","autoFocus","placeholder","onChange","target","Movies","moviesData","setMoviesData","isLoading","setIsLoading","location","useLocation","useSearchParams","setSearchParams","useEffect","get","controller","AbortController","fetchData","res","results","console","log","message","abort","preventDefault","Loader","map","movie","to","id","state","from","title"],"sourceRoot":""}