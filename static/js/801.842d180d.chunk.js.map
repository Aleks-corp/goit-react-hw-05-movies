{"version":3,"file":"static/js/801.842d180d.chunk.js","mappings":"kNAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAe,mCAAG,yGAAOC,EAAP,+BAAsB,sBAAtB,SACNF,EAAAA,EAAAA,IAAUE,EAAc,CAC7CC,OAAQ,CACNC,QAASL,KAHgB,cACvBM,EADuB,yBAOtBA,EAASC,MAPa,2CAAH,oD,4KCJfC,EAAYC,EAAAA,GAAAA,QAAH,mGAOTC,EAAQD,EAAAA,GAAAA,GAAH,8CAILE,EAAcF,EAAAA,GAAAA,GAAH,oEAKXG,EAAWH,EAAAA,GAAAA,GAAH,oEAKRI,EAASJ,EAAAA,GAAAA,GAAH,oEAKNK,EAAcL,EAAAA,GAAAA,EAAH,6C,SC8BxB,EAhDiB,SAAC,GAAsB,IAApBM,EAAmB,EAAnBA,aACVC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAE5DC,EAAY,GAElB,OADAD,GAAUA,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAcF,EAAUG,KAAKD,EAA7B,KAEnB,UAAChB,EAAD,WACGO,EAAaC,aACZ,gBACEU,MAAM,MACNC,OAAO,MACPC,IAAG,6CAAwCZ,GAC3Ca,IAAKZ,KAGP,gBACES,MAAM,MACNE,IAAI,+EACJC,IAAKZ,KAGT,4BACE,UAACP,EAAD,WACGO,EAAM,IAAEC,GAAY,WAAQA,EAAaY,MAAM,EAAG,GAA9B,SAEvB,UAACnB,EAAD,WAAa,cACC,IACXQ,GACC,4BAAOY,KAAKC,MAAqB,GAAfb,GAAmB,OAErC,iBAGHC,IACC,UAACR,EAAD,WAAU,aACC,SAACE,EAAD,UAAcM,OAG1BC,IACC,UAACR,EAAD,WAAQ,WACC,SAACC,EAAD,UAAcQ,EAAUW,KAAK,gBAM/C,E,oBCJD,EA5CsB,WAAO,IAAD,IAClBC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwCE,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOrB,EAAP,KAAqBsB,EAArB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAqB7C,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,oGAEdR,GAAa,GAFC,UAGIrC,EAAAA,EAAAA,GAAgB,UAAD,OAAWgC,IAH9B,OAGRc,EAHQ,OAIdX,EAAgBW,GAJF,gDAMdC,QAAQC,IAAI,KAAMC,SANJ,yBAQdZ,GAAa,GARC,4EAAH,qDAYf,OADAQ,IACO,WACLF,EAAWO,OACZ,CACF,GAAE,CAAClB,KAGF,iCACE,SAAC,KAAD,CAAMmB,GAAIb,EAAV,SAAwB,YACtBF,GAAuD,SAACgB,EAAA,EAAD,KAA3C,SAAC,EAAD,CAAUvC,aAAcA,KACtC,UAAC,KAAD,YACE,uBAAG,4BACH,SAAC,KAAD,CAAMsC,GAAG,OAAOX,MAAO,CAAEC,KAAMH,GAA/B,SAA+C,UAG/C,SAAC,KAAD,CAAMa,GAAG,UAAUX,MAAO,CAAEC,KAAMH,GAAlC,SAAkD,gBAIpD,SAAC,KAAD,MAGL,C","sources":["axios.js","components/MovieTab.styled.js","components/MovieTab.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b769d525e1ad4eef01b48a7fe3c818d0';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMoviesData = async (searchParams = '/trending/movie/day') => {\n  const response = await axios.get(searchParams, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.section`\n  display: flex;\n\n  padding: 16px;\n  border-bottom: 3px solid #999999;\n`;\n\nexport const Title = styled.h2`\n  margin-left: 20px;\n`;\n\nexport const VoteAverage = styled.h3`\n  padding-top: 20px;\n  margin-left: 16px;\n`;\n\nexport const Overview = styled.h3`\n  padding-top: 20px;\n  margin-left: 16px;\n`;\n\nexport const Genres = styled.h3`\n  padding-top: 20px;\n  margin-left: 16px;\n`;\n\nexport const Description = styled.p`\n  font-weight: 400;\n`;\n","import {\n  Container,\n  Title,\n  VoteAverage,\n  Overview,\n  Genres,\n  Description,\n} from './MovieTab.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieTab = ({ movieDetails }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDetails;\n  const genresArr = [];\n  genres && genres.map(({ name }) => genresArr.push(name));\n  return (\n    <Container>\n      {movieDetails.poster_path ? (\n        <img\n          width=\"250\"\n          height=\"375\"\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt={title}\n        />\n      ) : (\n        <img\n          width=\"250\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n          alt={title}\n        />\n      )}\n      <div>\n        <Title>\n          {title} {release_date && `(${release_date.slice(0, 4)})`}\n        </Title>\n        <VoteAverage>\n          User Score:{' '}\n          {vote_average ? (\n            <span>{Math.round(vote_average * 10)}%</span>\n          ) : (\n            'Unavailable'\n          )}\n        </VoteAverage>\n        {overview && (\n          <Overview>\n            Overview <Description>{overview}</Description>\n          </Overview>\n        )}\n        {genres && (\n          <Genres>\n            Genres <Description>{genresArr.join(', ')}</Description>\n          </Genres>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default MovieTab;\n\nMovieTab.propTypes = {\n  movieDetails: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n  }),\n};\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMoviesData } from '../axios';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport MovieTab from 'components/MovieTab';\nimport { Link, AddWrapper } from 'components/Layout.styled';\nimport Loader from 'components/Loader';\n\nconst MoviesDetails = () => {\n  const { id } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const res = await fetchMoviesData(`/movie/${id}`);\n        setMovieDetails(res);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [id]);\n\n  return (\n    <>\n      <Link to={backLinkHref}>Go Back</Link>\n      {!isLoading ? <MovieTab movieDetails={movieDetails} /> : <Loader />}\n      <AddWrapper>\n        <p>Additional information</p>\n        <Link to=\"cast\" state={{ from: backLinkHref }}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={{ from: backLinkHref }}>\n          Reviews\n        </Link>\n      </AddWrapper>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["API_KEY","axios","fetchMoviesData","searchParams","params","api_key","response","data","Container","styled","Title","VoteAverage","Overview","Genres","Description","movieDetails","poster_path","title","release_date","vote_average","overview","genres","genresArr","map","name","push","width","height","src","alt","slice","Math","round","join","id","useParams","useState","setMovieDetails","isLoading","setIsLoading","backLinkHref","useLocation","state","from","useEffect","controller","AbortController","fetchData","res","console","log","message","abort","to","Loader"],"sourceRoot":""}